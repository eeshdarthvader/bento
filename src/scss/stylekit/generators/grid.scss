/* -----------------------------------
  Grid Generator
  Generates utilty classes for grid
  based on config
---------------------------------------
  1. Container
  2. Row
  3. Col
  4. Offset
  5. Alignment
  6. Distribution
  7. Ordering
  8. Reversing
------------------------------------ */

// ------------------------------
// Container
// ------------------------------
.container {
  max-width: config('grid.gridWidth');
  margin: auto;
  padding: 0 config('grid.gutterWidth') * 0.5;

  @each $breakpoint,$value in config('breakPoints') {
    @include break($breakpoint){
      max-width: 100%;
      margin: auto;
      padding: 0 config('grid.gutterWidth');
    }
  }
}


// ------------------------------
// Row
// ------------------------------
.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-left: -1 * config('grid.gutterWidth') * 0.5;
  margin-right: -1 * config('grid.gutterWidth') * 0.5;
}


// ------------------------------
// Col
// ------------------------------
%col {
  box-sizing: border-box;
  flex: 0 0 auto;
  padding-right: config('grid.gutterWidth') * 0.5;
  padding-left: config('grid.gutterWidth') * 0.5;
}

.col {
  @extend %col;
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

// Generate column classes
@for $i from 1 through config('grid.gridColumns') {
  .col-#{$i} {
    @extend %col;
    flex-basis: percentage( $i / config('grid.gridColumns') );
    max-width: percentage( $i / config('grid.gridColumns') );
  }
}


// Generate column classes - responsive
@each $breakpoint,$value in config('breakPoints') {
    @for $i from 1 through config('grid.gridColumns') {
      @include break($breakpoint){
      .col-#{$i}--#{$breakpoint} {
        box-sizing: border-box;
        flex: 0 0 auto;
        padding-right: config('grid.gutterWidth') * 0.5;
        padding-left: config('grid.gutterWidth') * 0.5;
        flex-basis: percentage( $i / config('grid.gridColumns') );
        max-width: percentage( $i / config('grid.gridColumns') );
      }
    }
  }
} 



// ------------------------------
// Offset
// ------------------------------
@for $i from 1 through config('grid.gridColumns') {
  .col-offset-#{$i} {
    margin-left: percentage( $i / config('grid.gridColumns') );
  }
}


// ------------------------------
// Alignment
// ------------------------------
.start {
  justify-content: flex-start;
  text-align: start;
}

.center {
  justify-content: center;
  text-align: center;
}

.end {
  justify-content: flex-end;
  text-align: end;
}

.top {
  align-items: flex-start;
}

.middle {
  align-items: center;
}

.bottom {
  align-items: flex-end;
}


// ------------------------------
// Alignment
// ------------------------------
.around {
  justify-content: space-around;
}

.between {
  justify-content: space-between;
}


// ------------------------------
// Ordering
// ------------------------------
.first {
  order: -1;
}

.last {
  order: 1;
}


// ------------------------------
// Reversing
// ------------------------------
.reverse {
  flex-direction: row-reverse;
}